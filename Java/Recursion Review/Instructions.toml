CSC240 – Recursion Review

Example:
Given a non-negative int n, return the sum of its digits recursively.
sumDigits(126) → 9
sumDigits(49) → 13
sumDigits(2) → 2

For each of the following exercises:
a. Identify the base case
b. Identify the recursive case
c. Write a static java method that will perform the exercise. Call the method from
main() using at least the given test cases. Display the results. Avoid creating any
local variables in the methods.
Exercises:

1. Given a non-negative int n, recursively count the occurrences of 3 as a digit.
count3(313) → 2
count3(3) → 1
count3(456) → 0

2. Write a method that accepts two numbers and performs multiplication by
recursively adding the same number multiple times.
 int multiply( int num, int times ){…}
 multiply ( 0, 10 ) → 0
multiply ( 1, 5 ) → 5
multiply ( 18, 8 ) → 144

3. Write a boolean returning recursive method to determine if a number is prime.
Recursively determine if the any number less the number are divisible by the
number.
 boolean isPrime( int numToCheck, int count ){…}
 isPrime( 919, 2 ) → true
isPrime( 50, 2 ) → false
isPrime( 2, 2 ) → true

4. Given a String, recursively build a new string where the vowels are duplicated.
String dupVowel( String str ){…}
dupVowel("hello")→ "heelloo"
dupVowel("xxyy") → "xxyy"
dupVowel("abc") → "aabc"

5. Given an array of ints, recursively compute the number of times that a multiple of 10
appears in the array. index is used to examine a specific element from the array. Use a
helper function to incorporate an index to count through elements in the array.
int array10( int[] nums){…}
int array10Helper( int[] nums, int index ){…}

 array10([10, 20, 31]) → 2
 array10([11, 10]) → 1
 array10([1, 2, 3, 4]) → 0